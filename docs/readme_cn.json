{"type":"Document","children":[{"type":"Heading","level":0,"useIndex":true,"content":[{"type":"Text","value":"Minditor 是什么"}]},{"type":"Paragraph","id":6,"content":[{"type":"Text","value":"Minditor 是一个既注重最终用户编辑体验，又注重开发者体验的块级富文本编辑器。它有以下特点："}]},{"type":"ULItem","level":0,"content":[{"type":"Text","value":"已经提供了例如图片上传、markdown 命令等重要的组件和 Plugin，并将由官方持续完善，目标默认就提供达到专业编辑工具的用户体验。"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"支持 InlineBlock，可在行内插入。"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"可以用任何框架的组件来实现编辑器的 Block/InlineBlock。"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"除了常见的事件和 API 外， Plugin 系统还为开发者默认提供一系列重要的 reactive state，让开发 Plugin 变得无比简单。"}]},{"type":"Paragraph","content":[{"type":"Text","value":"现在这篇文档就是用 Minditor 编写和渲染的，你可以在这个页面上快速体验 Minditor 的功能。Have fun!。","formats":{"color":"rgb(36, 91, 219)"}}]},{"type":"Heading","level":0,"useIndex":true,"content":[{"type":"Text","value":"编辑功能"}]},{"type":"Heading","useIndex":true,"level":1,"content":[{"type":"Text","value":"复制、粘贴、剪切、撤回、重做"}]},{"type":"Paragraph","content":[{"type":"Text","value":""},{"type":"Text","value":""},{"type":"Text","value":"默认支持右键菜单和快捷键进行复制、粘贴、剪切、撤回、重做。"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"markdown commands"}]},{"type":"Paragraph","content":[{"type":"Text","value":"Minditor 默认提供了以下命令来实现快速编辑："}]},{"type":"ULItem","level":0,"content":[{"type":"Text","value":"输入 "},{"type":"InlineCode","value":"# + 空格"},{"type":"Text","value":" 来插入 Heading。# 的数量决定了 Heading 的层级"}]},{"level":1,"type":"ULItem","content":[{"type":"Text","value":"  输入 "},{"type":"InlineCode","value":"1. + 空格"},{"type":"Text","value":"来在 Heading 中插入自动序号。"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"在段首输入 "},{"type":"InlineCode","value":"- + 空格"},{"type":"Text","value":" 插入无序列表。"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"在段首落输入 "},{"type":"InlineCode","value":"1. + 空格"},{"type":"Text","value":"插入有序列表。"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"输入 "},{"type":"InlineCode","value":"` + 加任意文字 + `"},{"type":"Text","value":" 插入 Inline Code。"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"在段首输入 "},{"type":"InlineCode","value":"``` + 语言 + 空格"},{"type":"Text","value":" 插入代码编辑器。"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"Range Tool Plugin"}]},{"type":"Paragraph","content":[{"type":"Text","value":"鼠标划词会出现悬浮工具，可以修改字体样式或者创建链接。"}]},{"type":"Image","content":[],"src":"/rangeToolPlugin.png"},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"Insert Suggession Plugin"}]},{"type":"Paragraph","content":[{"type":"Text","value":"输入 "},{"type":"InlineCode","value":"/"},{"type":"Text","value":" 会出现下拉框，提供可插入的组件。如果在空行头部输入 "},{"type":"InlineCode","value":"/"},{"type":"Text","value":"，会同时出现可插入的 Block 和 InlineBlock。"}]},{"type":"Image","content":[],"src":"/suggessionToolPlugin.png"},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"Block Tool Plugin"}]},{"type":"Paragraph","content":[{"type":"Text","value":"鼠标移动到任意 Block，左侧会出现悬浮工具，默认提供删除、复制、黏贴和可插入 Block 等工具。"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"Table of contents Plugin"}]},{"type":"Paragraph","content":[{"type":"Text","value":"支持在文档外部显示由 Heading 构成的大纲。如本文档左侧所示。"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"Image Block"}]},{"type":"Paragraph","content":[{"type":"Text","value":"Minditor 的图片组件允许用户将图片上传到指定接口或者 aws3 bucket，也可以将图片使用 URL.createObjectURL 编码后直接保存到文档中。Minditor 中已经默认提供了将图片编码保存到文档中的组件 InlineImageBlock。"}]},{"type":"Image","content":[],"src":"/imageBlock.gif"},{"type":"Paragraph","content":[{"type":"Text","value":"你也可以自己使用 createImageBlock 传入相应参数来创建将图片上传到指定地址的组件："}]},{"type":"Code","value":"import {createImageBlock} from 'minditor'\n\n// @params\n// - type: 'xhr'|'aws'\n// - config: Uppy.XHRConfig|Uppy.AWS3Config\nconst ImageBlock = createImageBlock(\n  'xhr', \n  {endpoint: 'https://your-domain.com/upload'}\n)","language":"tsx"},{"type":"Paragraph","content":[{"type":"Text","value":"Image Block 中使用了 Uppy 作为上传的工具。更多地配置可以参考 "},{"type":"Link","href":"https://uppy.io/docs/xhr-upload/ ","alt":"https://uppy.io/docs/xhr-upload/ "},{"type":"Text","value":" 。"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"Grid Block"}]},{"type":"Paragraph","content":[{"type":"Text","value":"Grid 组件的单元格中支持所有的文档能力，相当于一个内嵌的小文档。可以通过左侧的 Block Tool 在空段落处插入 Grid。也可以在段首输入 "},{"type":"InlineCode","value":"/"},{"type":"Text","value":" 后 Insert Suggestion Plugin 中获得。Grid 支持的功能："}]},{"type":"Grid","columns":[266,100],"data":[[{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"功能"}]}]},{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"是否支持"}]}]}],[{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"删除行"}]}]},{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"是"}]}]}],[{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"删除列"}]}]},{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"是"}]}]}],[{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"调整列宽"}]}]},{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"是"}]}]}],[{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"调整行高"}]}]},{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"否","formats":{"color":"rgb(216, 57, 49)"}}]}]}],[{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"单元格中包含完整文档能力"}]}]},{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"是"}]}]}],[{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"调整列位置"}]}]},{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"否","formats":{"color":"rgb(216, 57, 49)"}}]}]}],[{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"调整行位置"}]}]},{"type":"Document","children":[{"type":"Paragraph","content":[{"type":"Text","value":"否","formats":{"color":"rgb(216, 57, 49)"}}]}]}]],"content":[]},{"type":"Paragraph","content":[{"type":"Text","value":"我们已经在开发一款更强大的 spreadsheet 工具，包含更强大的布局和数据处理能力，未来也会作为组件嵌入到 Mindtor 中，所以当前的 Grid 没有太多的增强计划。"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"Code Block"}]},{"type":"Paragraph","content":[{"type":"Text","value":"Minditor 使用了 CodeMirror 6 作为 Code 组件。默认支持以下语言:"}]},{"type":"ULItem","level":0,"content":[{"type":"Text","value":"javascript (alias js/jsx)"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"typescript (alias ts/tsx)"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"python"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"php"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"cpp"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"java"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"sql"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"json"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"rust"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"css"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"html"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"sass"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"less"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"xml"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"yalml"}]},{"type":"Paragraph","content":[{"type":"Text","value":"你可以通过在段首输入 "},{"type":"InlineCode","value":"``` + 语言 + 空格"},{"type":"Text","value":" 来插入指定语言的 Code Block。也可以通过 Block Tool 或者 Suggession Tool 插入。"}]},{"type":"Heading","level":0,"useIndex":true,"content":[{"type":"Text","value":"开发"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"安装与初始化"}]},{"type":"Code","value":"npm i minditor","language":"tsx"},{"type":"Paragraph","content":[{"type":"Text","value":"Minditor 本身的可以渲染在任意的 dom 节点中。对外没有任何的布局、样式等要求.\n如果你只是用来渲染最简单的文字。可以直接使用下面的方式来渲染："}]},{"type":"Code","value":"import {\n    Code,\n    Grid,\n    Heading,\n    InlineImageBlock,\n    InlineCode,\n    Link,\n    OLItem,\n    Paragraph,\n    Text,\n    ULItem\n    InlineImageBlock\n} from \"minditor\";\n\nconst rootElement = document.getElementById('root')!\nconst types = {\n    Paragraph,\n    Text,\n    Heading,\n    OLItem,\n    ULItem,\n    InlineCode,\n    Code,\n    Link,\n    Grid,\n    Image: InlineImageBlock\n}\nconst data = {\n    name: 'MyDoc',\n    children: [{\n        type: 'Paragraph',\n        content: [{type:'Text', value: 'This is my first document.'}]\n    }]\n}\n\nconst doc = new Document(rootElement, data, types)\ndoc.render()","language":"tsx"},{"type":"Paragraph","content":[{"type":"Text","value":"对于需要完整 Plugin，希望视图匡高自动适应外部 container 的场景，我们推荐使用 scaffold 来创建视图："}]},{"type":"Code","value":"import {\n    Code,\n    createBlockTool,\n    createRangeTool,\n    createSuggestionTool,\n    defaultBlockWidgets,\n    defaultFormatWidgets,\n    defaultMarkdownPlugins,\n    defaultSuggestionWidgets,\n    Grid,\n    Heading,\n    InlineImageBlock,\n    InlineCode,\n    Link,\n    OLItem,\n    Paragraph,\n    scaffold,\n    Text,\n    ULItem,\n    createTOCTool\n} from \"minditor\";\n\nconst root= document.getElementById('root')!\nconst types = {\n    Paragraph,\n    Text,\n    Heading,\n    OLItem,\n    ULItem,\n    InlineCode,\n    Code,\n    Link,\n    Grid,\n    Image: InlineImageBlock\n}\n\nconst plugins = [\n    ...defaultMarkdownPlugins,\n    createBlockTool(defaultBlockWidgets),\n    createRangeTool( defaultFormatWidgets ),\n    createSuggestionTool(defaultSuggestionWidgets),\n    createTOCTool()\n]\nconst result = scaffold(root, {data: jsonData, types, plugins}, { debug: true })\nresult.render()","language":"tsx"},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"开发 InlineBlock"}]},{"type":"Paragraph","content":[{"type":"Text","value":"Inline可以嵌入到行内，开发一个 InlineBlock 非常简单，我们以 InlineCode 为例："}]},{"type":"Code","value":"export class InlineCode extends InlineComponent {\n    static displayName = 'InlineCode'\n    constructor(public data: InlineCodeData) {\n        super();\n    }\n    render()  {\n        return <span style={{display:'inline-block', background:'#eee', padding:'4px 8px'}}>{this.data.value}</span>\n    }\n    toText() {\n        return this.data.value\n    }\n}","language":"tsx"},{"type":"Paragraph","content":[{"type":"Text","value":"通常有了 InlineBlock 之后，我们还需要为用户提供使用 InlineBlock 的方法。有三种方式："}]},{"type":"ULItem","level":0,"content":[{"type":"Text","value":"在 Minditor 的 SuggestionTool 中出一个 Widget，当用户输入 / 时将展开下拉框看见这个 Block，并能点击使用。"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"实现一个 Plugin，监听用户的特殊输入，当输入满足条件时插入 InlineBlock。类似于 markdown。"}]},{"type":"Paragraph","content":[{"type":"Text","value":"我们在这里以添加字体颜色和背景色的 Widget 为例来看如何创建一个 Range Tool 的 Widget："}]},{"type":"Code","value":"class ColorWidget extends RangeWidget {\n    static displayName = `ColorRangeWidget`\n    useColor = (color: string) => {\n        this.document.view.formatCurrentRange({color})\n    }\n    useBackgroundColor = (backgroundColor: string) => {\n        this.document.view.formatCurrentRange({backgroundColor})\n    }\n\n    render() {\n        const hover = atom(false)\n\n        const pickerStyle = () => {\n            return ({\n                display: hover() ? 'block' : 'none',\n                position: 'absolute',\n                top: '100%',\n                left: 0,\n                transform: 'translateX(-50%)',\n            })\n        }\n\n        const picker = (\n            <div style={pickerStyle}>\n                <ColorPicker onColorClick={this.useColor} onBackgroundColorClick={this.useBackgroundColor}/>\n            </div>\n        )\n        return (\n            <div style={{display:'flex', position:'relative', width:24, height:24, alignItems: 'center',justifyContent: 'center'}}\n                 onmouseenter={() => hover(true)}\n                 onmouseleave={() => hover(false)}\n            >\n                <span style={{cursor: 'pointer',marginLeft:8, fontSize:18}}>A</span>\n                {picker}\n            </div>\n        )\n    }\n}","language":"tsx"},{"type":"Paragraph","content":[{"type":"Text","value":"有了这个 widget 之后，只要在 createRangeTool 的地方传入它即可使用："}]},{"type":"Code","value":"const plugins = [\n    //...  其他plugin\n    createRangeTool( [...defaultFormatWidgets, ColorWidget] ),\n]","language":"tsx"},{"type":"Paragraph","content":[{"type":"Text","value":"关于 Plugin 的开发下面有更详细的例子。"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"开发  Block"}]},{"type":"Paragraph","content":[{"type":"Text","value":"开发一个 Block Comopnent 的方式与 Inline Component 基本相同。只是最后在提供给用户使用时，我们是将其注册到 BlockTool 或 Insert Suggession Tool 中供用户使用。注意 BlockTool 中的 Widget 和 Insert Suggession Tool 的  Widget 是通用的。为了进一步降低 Widget 的开发难度，minditor 还提供了 createSuggestionWidget 函数来帮助快速开发 widget，我们这里以插入 Code 的 Widget 为例："}]},{"type":"Code","value":"type CommonInsertHandleProps = {\n    insert: (initialData: InlineData|BlockData) => void\n}\n\nfunction CodeInsertHandle({insert}: CommonInsertHandleProps) {\n    const onGridChange = (lang: string) => {\n        insert({type: 'Code', language:lang, value: '', content: []})\n        activated(false)\n    }\n    const activated = atom(false)\n\n    const languages = Object.keys(CodeBlock.langToPlugin)\n\n    return (\n        <div\n            style={{\n                position: 'relative',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'flex-start',\n                cursor: 'pointer',\n                width: '100%'\n            }}\n            onmouseenter={() => activated(true)}\n            onmouseleave={() => activated(false)}\n        >\n            <Code size={18}/>\n            <span style={{marginLeft: 8, fontSize: 14,  whiteSpace:'nowrap'}}>+ Code</span>\n            <Right size={18}/>\n\n            <div style={() => ({\n                display: activated() ? 'block' : 'none',\n                position: 'absolute',\n                left: 'calc(100% - 8px)',\n                top: 0,\n                transform: 'translateY(-50%)',\n                paddingLeft: 18,\n                background: 'transparent',\n            })}\n            >\n                <div style={{\n                    border: '1px solid #eee',\n                    background: '#fff',\n                    boxShadow: '2px 2px 5px #dedede',\n                    maxHeight: 400,\n                    overflowY: 'auto'\n                }}\n                >\n                    <CodeLanguagePicker onChange={onGridChange} languages={languages}/>\n                </div>\n            </div>\n        </div>\n    )\n} \n\nconst CodeBlockWidget = createSuggestionWidget(CodeInsertHandle, 'Code', true),","language":"ts"},{"type":"Heading","level":2,"useIndex":true,"content":[{"type":"Text","value":"使用 React 来开发Block"}]},{"type":"Paragraph","content":[{"type":"Text","value":"我们以一个 Calendar 组件来演示如何使用其他框架来开发 Block."}]},{"type":"Code","value":"import { Component } from 'minditor'\nimport { createElement } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nclass Calendar extends Component {\n    static displayName = 'Calendar'\n    render() {\n        const container = document.createElement('div')\n        container.contentEditable = 'false'\n        const root = createRoot(container);\n        root.render(createElement(DayPicker, {mode: 'single'}));\n        return container\n    }\n}","language":"tsx"},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"开发 Plugin"}]},{"type":"Paragraph","content":[{"type":"Text","value":"Minditor 中的 Plugin 拥有对整个 document 进行控制的能力，能实现几乎任何需求。它能实现根据用户的输入执行一次性的命令，也可以有自己的独立界面来支持更复杂的操作。"}]},{"type":"Heading","level":2,"useIndex":true,"content":[{"type":"Text","value":"执行一次性命令"}]},{"type":"Paragraph","content":[{"type":"Text","value":"我们以 markdown 中添加 Heading 的能力为例来看如何开发 Plugin。"}]},{"type":"Code","value":"class Plugin extends Plugin{\n    public static displayName = `createHeading`\n    public static activateEvents = {\n        inputChar: onInputKey(' ')\n    }\n    run({  } : PluginRunArgv) : boolean | undefined{\n        const initialCharacters = '#'\n        const { view, history } = this.document\n        const startRange = view.state.selectionRange()\n        const { startText,  startBlock,  isEndFull,isCollapsed, endText } = startRange!\n        //  1. 只能在 Para 的 content 里面产生\n        if (!(startBlock instanceof Paragraph || startBlock instanceof Heading)) return false\n        // 2. 只能在头部输入\n        if (startBlock.firstChild !== startText) return false\n        // 3. 头部就必须匹配\n        if (startText.data.value.slice(0, initialCharacters.length) !== initialCharacters) return false\n\n        // 去掉结尾的空格\n        const textToMatch = startText.data.value.slice(0, startText.data.value.length - 1)\n        const matchedText = reversMatchStr(textToMatch, initialCharacters)\n        if (matchedText === false) return false\n\n        history.openPacket(startRange)\n        // 1. 先把 startText 中的 initialCharacters + 空格删掉\n        const newTextAfterCursor = startText.data.value.slice(initialCharacters.length + 1)\n        view.updateText(newTextAfterCursor, startText)\n        // 2. 把所有的 Text 取出来\n        const titleTextFrag = view.deleteBetween(startText, null, startBlock)\n        // 3. 替换成新的 Heading block\n        const newBlock = createBlock.call(this, titleTextFrag)\n        view.replace(newBlock, startBlock, this.document.content)\n        view.setCursor(newBlock, 0)\n        const endRange = new DocRange(newBlock, newBlock.firstChild!, 0, newBlock, newBlock.firstChild!, 0, )\n        history.closePacket(endRange)\n        return true\n    }\n}","language":"tsx"},{"type":"Heading","level":2,"useIndex":true,"content":[{"type":"Text","value":"渲染界面"}]},{"type":"Paragraph","content":[{"type":"Text","value":"Plugin 使用了一个轻量级、响应式的前端框架 Axii 来渲染 UI。开发者只需要简单记住以下基础用法即可："}]},{"type":"ULItem","level":0,"content":[{"type":"Text","value":"需要相应的数据使用 atom() 包裹起来，用函数调用的形式取值赋值。\n"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"使用 computed 来包装计算数据。\n"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"需要保持 reactive 的 dom 结构/ attribute 使用函数来表示，无需  computed 包装。"}]},{"type":"Paragraph","content":[{"type":"Text","value":"我们以 Range Tool 为例，来看如何使用 Axii  和系统提供的 reactive state 构建响应式界面。"}]},{"type":"Code","value":"class OneRangeTool extends RangeTool {\n    public rangeWidgets: RangeWidget[]\n\n    constructor(public document: Document) {\n        super(document);\n        this.rangeWidgets = RangeWidgets.map(RangeWidgetClass => {\n            return new RangeWidgetClass(this.document)\n        })\n    }\n    calculatePosition(outsideDocBoundary: boolean) {\n        const {visibleRangeRect, lastMouseUpPositionAfterRangeChange, selectionRange, hasRange} = this.document.view.state\n\n        const positionAttrs = {\n            position: 'fixed'\n        } as any\n\n        positionAttrs.position = 'fixed'\n        // 根据最后鼠标停的位置，来决定浮层的位置\n        // 1. 如果鼠标位置在 rect 下面，那么浮层就显示在  range 下面\n        // 2. 如果鼠标位置在 rect 上面，那么浮层就显示在  range 上面\n        if (lastMouseUpPositionAfterRangeChange()!.top > (visibleRangeRect.raw!.top + visibleRangeRect.raw!.height / 2)) {\n            positionAttrs.top = visibleRangeRect.raw!.top + visibleRangeRect.raw!.height\n            positionAttrs.bottom = undefined \n        } else {\n            positionAttrs.top = undefined \n            positionAttrs.bottom = -(visibleRangeRect.raw!.top)\n        }\n        positionAttrs.left = lastMouseUpPositionAfterRangeChange()!.left\n\n        // 如果和  view 在同一个 boundary 之内，使用同样的 scroll，那么使用 absolute 定位\n        if(!outsideDocBoundary) {\n            const boundaryRect = this.document.view.getContainerBoundingRect()!\n            positionAttrs.position = 'absolute'\n            if (lastMouseUpPositionAfterRangeChange()!.top > (visibleRangeRect.raw!.top + visibleRangeRect.raw!.height / 2)) {\n                positionAttrs.top -= boundaryRect.top\n            } else {\n                positionAttrs.bottom += boundaryRect.top\n            }\n            positionAttrs.left -= boundaryRect.left\n\n        }\n        return positionAttrs\n    }\n    render(outsideDocBoundary: boolean) {\n        const style = () => {\n            const { lastMouseUpPositionAfterRangeChange, hasRange} = this.document.view.state\n            if (!lastMouseUpPositionAfterRangeChange() || !hasRange()){\n                return {display: 'none'}\n            }\n\n            const positionAttrs = this.calculatePosition(outsideDocBoundary)\n\n            return {\n                display: 'block',\n                ...positionAttrs,\n            }\n        }\n\n        return <div style={style} data-testid=\"rangeTool-container\">\n            <div style={{display:'flex', whiteSpace: 'nowrap'}}>\n                {() => this.rangeWidgets.map((widget: RangeWidget) => {\n                    return widget.render()\n                })}\n            </div>\n        </div>\n    }\n}","language":"tsx"},{"type":"Heading","level":2,"useIndex":true,"content":[{"type":"Text","value":"系统内置的 reactive state"}]},{"type":"Paragraph","content":[{"type":"Text","value":"系统默认提供的 Reactive State 如下："}]},{"type":"ULItem","level":0,"content":[{"type":"Text","value":"lastActiveDeviceType：用户最后操作的设备，鼠标或键盘。"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"lastMouseUpPositionAfterRangeChange：mouseup 事件最后出现的位置。"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"mousePosition：当前鼠标位置"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"selectionRange：表示成 Minditor DocRange 类型的选区对象"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"hasRange：是否有选区"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"rangeBeforeComposition：输入法出现之前的选区"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"lastMouseEnteredBlock：最后触发 mouseenter 的 Block"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"visibleRangeRect：选区的 boundRect 对象"}]},{"level":0,"type":"ULItem","content":[{"type":"Text","value":"bodyViewPortSize：body 可视范围的尺寸"}]},{"type":"Heading","level":0,"useIndex":true,"content":[{"type":"Text","value":"Roadmap"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"AutoComplete Plugin"}]},{"type":"Paragraph","content":[{"type":"Text","value":"根据用户的上下文来支持自动补全，为接入 AI Copilot 提供基础。"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"File Upload Block"}]},{"type":"Paragraph","content":[{"type":"Text","value":"更多的文件上传和预览类型。"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"Data Table"}]},{"type":"Paragraph","content":[{"type":"Text","value":"支持可完整排序、筛选等功能的 Data Table。"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"Block level collaborative editing"}]},{"type":"Paragraph","content":[{"type":"Text","value":"块级的协同编辑，支持块级锁和单独授权。"}]},{"type":"Heading","level":1,"useIndex":true,"content":[{"type":"Text","value":"More requests from community"}]},{"type":"Paragraph","content":[{"type":"Text","value":"我们欢迎用户提出更多 feature request。"}]},{"type":"Heading","level":0,"useIndex":true,"content":[{"type":"Text","value":"支持我们"}]},{"type":"Paragraph","content":[{"type":"Text","value":"Minditor 目前由 "},{"type":"Link","href":"https://github.com/sskyy","alt":"Zhenyu Hou"},{"type":"Text","value":" 独立开发和维护。你的支持将用于雇佣开发者持续维护本项目和开发新的功能。Minditor 承诺所有支持支出均用于开发开源、免费、供社区所有人使用的功能。"}]},{"type":"Paragraph","content":[{"type":"Text","value":"通过 Patreon 支持本项目："},{"type":"Link","href":"https://patreon.com/sskyy","alt":"https://patreon.com/sskyy"},{"type":"Text","value":" 。"}]},{"type":"Paragraph","content":[{"type":"Text","value":""}]}]}